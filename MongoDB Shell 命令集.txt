
MongoDB Shell 命令集
CURD对照
https://docs.mongodb.com/manual/crud/

mongodb 权限设置
权限详解

内建角色：

数据库用户角色：read、readWrite；

数据库管理角色：dbAdmin、dbOwner、userAdmin；

集群管理角色：   clusterAdmin、clusterManager、clusterMonitor、hostManager；

备份恢复角色：   backup、restore；

所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase

超级用户角色：   root；  这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）

内部角色：          __system；

------------------------------------------------------------------------------------------

角色说明：

Read：                             允许用户读取指定数据库

readWrite：                     允许用户读写指定数据库

dbAdmin：                      允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile

userAdmin：                    允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户

dbOwner：                       允许在当前DB中执行任意操作

readAnyDatabase：          赋予用户所有数据库的读权限，只在admin数据库中可用

readWriteAnyDatabase： 赋予用户所有数据库的读写权限，只在admin数据库中可用

userAdminAnyDatabase：赋予用户所有数据库管理User的权限，只在admin数据库中可用

dbAdminAnyDatabase：   赋予管理所有数据库的权限，只在admin数据库中可用

root：                                 超级账号，超级权限，只在admin数据库中可用。

------------------------------------------------------------------------------------------

集群管理角色：

clusterAdmin：                  赋予管理集群的最高权限，只在admin数据库中可用

clusterManager：               赋予管理和监控集群的权限

clusterMonitor：                赋予监控集群的权限，对监控工具具有readonly的权限

hostManager：                   赋予管理Server

---------------------------------------------------------------------------------------------
mangoDB聚合（aggregate）实例

//创建实例
db.inventory.insertMany([
   { item: "journal", qty: 25, tags: ["blank", "red"], size: { h: 14, w: 21, uom: "cm" } },
   { item: "mat", qty: 85, tags: ["gray"], size: { h: 27.9, w: 35.5, uom: "cm" } },
   { item: "mousepad", qty: 25, tags: ["gel", "blue"], size: { h: 19, w: 22.85, uom: "cm" } }
])
//执行
db.inventory.aggregate( [
   {
     $group: {
        _id: null,
        total: { $sum: "$qty" }
     }
   }
] )
//结果
{"_id":null, "total":135}

//执行
db.inventory.aggregate( [
   {
     $group: {
        item: "$item",
        total: { $sum: "$qty" }
     }
   }
] )	

mongo 多边形
db.geo.ensureIndex(  
    {  
        polygons: "2dsphere"  
    }  
)
    
db.geo.insert(
    {
        polygons:
        {
            type:"Polygon",
            coordinates:[[
                [113.314882,23.163055],
                [113.355845,23.167042],
                [113.370289,23.149564],
                [113.356779,23.129758],
                [113.338238,23.13913],
                [113.330979,23.124706],
                [113.313588,23.140858],
                [113.323865,23.158204],
                [113.314882,23.163055],
            ]]
        }
    }
)

db.geo.find(
    {
        polygons:
        {
            $geoIntersects:
            {
                $geometry:{ 
                    "type" : "Point",
                    "coordinates" : [113.330908,23.155678] }
                }
            }
        }
)
        
db.geo.find(
    {
        polygons:
        {
            $geoIntersects:
            {
                $geometry:{ 
                    "type" : "Point",
                    "coordinates" : [113.33831,23.137335] }
                }
            }
        }
)
mongo 导入导出
mongoimport --host 192.168.233.128 --port 27017 --username root --password "rikbase" --collection neighborhoods --db rikbase --file /opt/testFiles/mongoFiles/neighborhoods.json
mongoimport --host 192.168.233.128 --port 27017 --username root --password "rikbase" --collection restaurants --db rikbase --file /opt/testFiles/mongoFiles/restaurants.json
